{"version":3,"sources":["Components/Nav.js","Components/Footer.js","Components/Dashboard Components/Map.tsx","Components/Dashboard Components/GridBox.tsx","utils/countryCodeToEmoji.ts","Components/Dashboard Components/CountryTable.tsx","Components/Dashboard Components/LineAndBarChart.tsx","utils/rechartDataFormatter.ts","Components/Dashboard Components/CountryTimeLineHOC.tsx","Components/Dashboard Components/Dashboard.tsx","Components/Dashboard Components/Controls.tsx","Components/Dashboard Components/CovidDataHOC.tsx","Components/About.js","Components/Manual.js","Components/Main.js","App.js","serviceWorker.ts","index.js"],"names":["NavBar","props","useState","menuState","setMenu","className","BarChartOutlined","onClick","MenuOutlined","to","HomeOutlined","QuestionCircleOutlined","ProfileOutlined","href","target","rel","DeploymentUnitOutlined","style","marginBottom","Footer","Map","mapContainer","map","this","mapboxgl","container","center","lng","lat","zoom","once","addSource","type","data","features","mapDataToGeoJSON","allCoutries","addLayer","id","source","paint","lastId","popup","Popup","closeButton","closeOnClick","on","e","f","properties","getCanvas","cursor","cases","country","deaths","recoveries","coordinates","geometry","slice","HTML","toLocaleString","setLngLat","setHTML","addTo","undefined","remove","addControl","NavigationControl","FullscreenControl","allCountries","x","countryInfo","long","_id","iso2","iso3","recovered","flyTo","essential","ref","el","React","PureComponent","GridBox","isLoading","textAlign","padding","display","alignItems","height","justifyContent","LoadingOutlined","marginLeft","children","CC_REGEX","countryCodeEmoji","cc","test","TypeError","chars","toUpperCase","c","charCodeAt","String","fromCodePoint","memoizedCountryTable","memo","key","truncate","length","memoizedHM","say","formattedData","yAxisValue","i","name","Date","date","month","fulldate","value","reverse","dataFormatted","xAxisValue","timeline","simple","width","margin","top","right","left","bottom","strokeWidth","isAnimationActive","animationEasing","animationDuration","dataKey","stroke","fill","vertical","strokeDasharray","tickLine","ticks","content","active","payload","label","dayOfMonth","day","getCountryTimeLine","countryCode","fetch","then","res","json","CountryTimeLineHOC","useQuery","refetchInterval","refetchOnWindowFocus","refetchIntervalInBackground","error","pass","Dashboard","countryData","position","new_confirmed","new_recovered","zIndex","toFixed","allCountriesData","globalTimeline","overflow","toDateString","onChange","changeCountry","countryCodeToEmoji","getAllData","query","Promise","all","About","marginTop","src","RenderMain","refetch","state","setState","startingCountry","setStartingCountry","useEffect","validCountries","filter","find","workaroundData","event","currentCountry","prev","retry","useCovidData","flexDirection","borderRadius","color","background","outline","border","fontSize","Main","exact","path","App","Boolean","window","location","hostname","match","init","dsn","process","accessToken","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.e367a9ba.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n// import { ReactComponent as SiteLogo } from \"../imgs/site-logo.svg\";\n// import { ReactComponent as NavButton } from \"../imgs/menu.svg\";\n// import { ReactComponent as HomeLogo } from \"../imgs/house_.svg\";\n// import { ReactComponent as AboutLogo } from \"../imgs/copy_.svg\";\n// import { ReactComponent as LinkedInLogo } from \"../imgs/link_.svg\";\n// import { ReactComponent as CvLogo } from \"../imgs/book_.svg\";\nimport { BarChartOutlined, MenuOutlined, HomeOutlined, QuestionCircleOutlined, ProfileOutlined, DeploymentUnitOutlined } from '@ant-design/icons';\nimport {Link} from 'react-router-dom'\n\nexport default function NavBar(props) {\n\n  const [menuState,setMenu] = useState('open_menu')\n\n  function flipMenu(){\n    setMenu(menuState === 'closed_menu' ? 'open_menu' : 'closed_menu')\n  }\n\n  return (\n    <nav>\n      <div className=\"nav_content\">\n        <BarChartOutlined />  \n        <h3 className=\"site_title\">react project | COVID-19 Dashboard</h3>\n        <button className=\"nav_button\" onClick={flipMenu}><MenuOutlined /></button>\n       \n\n        {/* movile menu expanded */}\n        <div className={`menu ${menuState}`}>\n          <div className='menu_content'>\n            <ul>\n              <li><Link to='/ReactCovid19/'><HomeOutlined /><p>Home</p></Link></li>\n              \n              <li><Link to='/ReactCovid19/about'><QuestionCircleOutlined /><p>About</p></Link></li>\n              \n              <li><Link to='/ReactCovid19/manual'><ProfileOutlined /><p>Manual</p></Link></li>\n              {/* <li><a href=\"/manual.pdf\" target=\"_self\" rel=\"noopener noreferrer\"><ProfileOutlined /><p>Manual</p></a></li> */}\n              \n              <li><a href=\"https://tunchz.github.io/Covid-19/\" target=\"_self\" rel=\"noopener noreferrer\"><DeploymentUnitOutlined /><p>Covid-19 in Thailand</p></a></li>\n            </ul>\n            <p style={{marginBottom: '10px'}}>react project | COVID-19 Dashboard</p>\n          </div>\n         \n        </div>\n      </div>\n    </nav>\n  );\n}\n","import React from \"react\";\n// import { ReactComponent as LinkedInLogo } from \"../imgs/linkedin.svg\";\n// import { ReactComponent as CvLogo } from \"../imgs/cv.svg\";\n// import { ReactComponent as HomeLogo } from \"../imgs/home.svg\";\n// import { ReactComponent as AboutLogo } from \"../imgs/question-circle.svg\";\nimport { HomeOutlined, QuestionCircleOutlined, ProfileOutlined, DeploymentUnitOutlined } from '@ant-design/icons';\n\nimport {Link} from 'react-router-dom'\nexport default function Footer(props) {\n  return (\n    <footer>\n      <div className=\"footer_content\">\n        <h4>- FWTT -</h4>\n\n        <ul className=\"footer_nav\">\n          <li>\n          <Link to='/ReactCovid19/'>\n              <HomeOutlined />\n              <p>Home</p>\n            </Link>\n          </li>\n          <li>\n           <Link to='/ReactCovid19/about'>\n              <QuestionCircleOutlined />\n              <p>About</p>\n            </Link>\n           \n          </li>\n          <li><Link to='/ReactCovid19/manual'><ProfileOutlined /><p>Manual</p></Link></li>\n          {/* <li>\n            <a href=\"/manual.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">\n              <ProfileOutlined />\n              <p>Manual</p>\n            </a>\n          </li> */}\n          <li>\n            <a\n              href=\"https://tunchz.github.io/Covid-19/\"\n              target=\"_self\"\n              rel=\"noopener noreferrer\"\n            >\n              <DeploymentUnitOutlined />\n              <p>Covid-19 in Thailand</p>\n            </a>\n          </li>\n        </ul>\n      </div>\n    </footer>\n  );\n}\n","import React from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport { AllCountriesDataInterface } from \"../../DataInterfaces/allCountriesDataInterface\";\n\ninterface MapProps {\n  lng?: number;\n  lat?: number;\n  allCoutries: AllCountriesDataInterface | null | undefined;\n}\n\nexport default class Map extends React.PureComponent<MapProps> {\n  mapContainer: any = \"\";\n  map: mapboxgl.Map | null | undefined = null;\n\n  componentDidMount() {\n  \n    this.map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: \"mapbox://styles/khattakahmed/ckai0622g0ggc1io16p7dggg4\",\n      center: [this.props.lng ?? 0, this.props.lat ?? 0],\n      zoom: 3,\n    });\n\n    //https://dev.to/alemesa/how-to-create-a-covid-19-map-with-mapbox-and-react-3jgf#add_data\n    this.map.once(\"load\", () => {\n      // Add our SOURCE\n      // with id \"points\"\n      this.map?.addSource(\"points\", {\n        type: \"geojson\",\n        data: {\n          type: \"FeatureCollection\",\n          features: this.mapDataToGeoJSON(this.props.allCoutries),\n        },\n      });\n\n      //https://dev.to/alemesa/how-to-create-a-covid-19-map-with-mapbox-and-react-3jgf#add_data\n      //https://docs.mapbox.com/mapbox-gl-js/style-spec/expressions/#interpolate\n      //https://docs.mapbox.com/mapbox-gl-js/style-spec/expressions/#get\n      //https://docs.mapbox.com/mapbox-gl-js/style-spec/expressions/#zoom\n      //https://docs.mapbox.com/help/tutorials/mapbox-gl-js-expressions/\n      this.map?.addLayer({\n        id: \"circles\",\n        source: \"points\", // this should be the id of the source\n        type: \"circle\",\n        // paint properties\n        paint: {\n          \"circle-opacity\": 0.75,\n          \"circle-stroke-width\": 0.1,\n          \"circle-radius\": [\n            \"interpolate\",\n            [\"linear\"],\n            [\"get\", \"cases\"],\n            1,\n            4,\n            1000,\n            8,\n            4000,\n            10,\n            8000,\n            14,\n            12000,\n            18,\n            100000,\n            40,\n          ],\n          \"circle-color\": [\n            \"interpolate\",\n            [\"linear\"],\n            [\"get\", \"cases\"],\n            1,\n            \"#ffffb2\",\n            5000,\n            \"#fed976\",\n            10000,\n            \"#feb24c\",\n            25000,\n            \"#fd8d3c\",\n            50000,\n            \"#fc4e2a\",\n            75000,\n            \"#e31a1c\",\n            100000,\n            \"#b10026\",\n          ],\n        },\n      });\n\n      const popup = new mapboxgl.Popup({\n        closeButton: false,\n        closeOnClick: false,\n      });\n\n      // Variable to hold the active country/province on hover\n      let lastId;\n\n      this.map?.on(\"mousemove\", \"circles\", (e) => {\n        // Get the id from the properties\n\n        //@ts-ignore\n       \n\n        //TODO: Fix this\n        // @ts-ignore\n        const f = e.features[0];\n\n        if (!f) {\n          return;\n        }\n\n        const id = f.properties?.id;\n\n        if (!id) {\n          return;\n        }\n\n        if (id !== lastId) {\n          lastId = id;\n          // @ts-ignore\n          this.map.getCanvas().style.cursor = \"pointer\";\n          // @ts-ignore\n          const { cases, country, deaths, recoveries } = f.properties;\n\n          // @ts-ignore\n          const coordinates = e.features[0].geometry.coordinates.slice();\n\n          const HTML = `\n          <div class='popup'>\n            <p>Country: <b>${country.toLocaleString()}</b></p>\n            <p>Cases: <b>${cases.toLocaleString()}</b></p>\n            <p>Deaths: <b>${deaths.toLocaleString()}</b></p>\n            <p>Recoveries: <b>${recoveries.toLocaleString()}</b></p>\n          </div>\n          `;\n\n          // Ensure that if the map is zoomed out such that multiple\n          // copies of the feature are visible, the popup appears\n          // over the copy being pointed to.\n          // while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n          //   coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n          // }\n\n          popup\n            .setLngLat(coordinates)\n            .setHTML(HTML)\n            //@ts-ignore\n            .addTo(this.map);\n\n    \n          // const coordinates = e.features[0].geometry.coordinates.slice();\n        }\n      });\n\n      // Mouse leave event\n      this.map?.on(\"mouseleave\", \"circles\", () => {\n        // Reset the last Id\n        lastId = undefined;\n        // @ts-ignore\n        this.map.getCanvas().style.cursor = \"\";\n        popup.remove()\n      });\n    });\n\n    // Add zoom and rotation controls to the map.\n    this.map.addControl(new mapboxgl.NavigationControl());\n    this.map.addControl(new mapboxgl.FullscreenControl());\n    // this.map.scrollZoom.disable();\n  }\n\n  private mapDataToGeoJSON(\n    allCountries: AllCountriesDataInterface | undefined | null\n  ): any {\n    return allCountries?.data.map((x) => {\n      return {\n        type: \"Feature\",\n        geometry: {\n          type: \"Point\",\n          coordinates: [x.countryInfo.long, x.countryInfo.lat],\n        },\n        properties: {\n          id: '' + x.countryInfo._id + x.countryInfo.iso2 + x.countryInfo.iso3, // unique identifier in this case the index\n          country: x.country,\n          cases: x.cases,\n          deaths: x.deaths,\n          recoveries: x.recovered,\n        },\n      };\n    });\n  }\n\n  render() {\n    this.map?.flyTo({\n      center: [this.props.lng ?? 0, this.props.lat ?? 0],\n      essential: true,\n      zoom: 5,\n    });\n\n    return (\n      <>\n        <div className=\"map_content\" ref={(el) => (this.mapContainer = el)} />\n      </>\n    );\n  }\n}\n","import React, { ReactNode } from 'react'\nimport { LoadingOutlined } from '@ant-design/icons'\n\ninterface GridBoxProps {\n    id: string\n    children: any\n    isLoading?: boolean\n}\n\nexport default function GridBox(props: GridBoxProps){\n\n    if(props.isLoading) {\n        return (\n            <div className='grid_box' id={props.id}>\n                <div style={{textAlign: 'center', padding: '10px', display: 'flex', alignItems: 'center',height: '100%', justifyContent: 'center'}}>\n                    <LoadingOutlined/>\n                    <span style={{marginLeft : 10}}>Loading ...</span> \n                </div>\n            </div>\n        )\n    } else {\n        return (\n            <div className='grid_box' id={props.id}>\n                {props.children}\n            </div>\n        )\n    }\n    \n\n    \n}","// https://github.com/thekelvinliu/country-code-emoji/blob/master/src/index.js\n// country code regex\nconst CC_REGEX = /^[a-z]{2}$/i;\n\n// offset between uppercase ascii and regional indicator symbols\nconst OFFSET = 127397;\n\n/**\n * convert country code to corresponding emoji flag\n * @param {string} cc - country code string\n * @returns {string} country code emoji\n */\nexport default function countryCodeEmoji(cc) {\n  if (!CC_REGEX.test(cc)) {\n    const type = typeof cc;\n    throw new TypeError(\n      `cc argument must be an ISO 3166-1 alpha-2 string, but got '${\n        type === 'string' ? cc : type\n      }' instead.`,\n    );\n  }\n\n  const chars = [...cc.toUpperCase()].map(c => c.charCodeAt() + OFFSET);\n  return String.fromCodePoint(...chars);\n}","import React from \"react\";\nimport { AllCountriesDataInterface } from \"../../DataInterfaces/allCountriesDataInterface\";\nimport countryCodeEmoji from \"../../utils/countryCodeToEmoji\";\nimport truncate from \"lodash.truncate\";\n\ntype CountryTableProps = AllCountriesDataInterface\n\nfunction CountryTable(props: CountryTableProps) {\n  return (\n    <table className='table_content'>\n      <thead >\n        <tr>\n          <th>Country</th>\n          <th>Cases</th>\n          <th>Recoveries</th>\n          <th>Fatal</th>\n        </tr>\n      </thead>\n      <tbody>\n        {props.data?.map((x) => {\n          return (\n            <tr key={x.country}>\n              <td>\n                {countryCodeEmoji(x.countryInfo.iso2)} &nbsp;\n                {truncate(x.country, {\n                  length: 15,\n                })}\n              </td>\n              <td>{x.cases.toLocaleString()}</td>\n              <td>{x.recovered.toLocaleString()}</td>\n              <td>{x.deaths.toLocaleString()}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\n\nconst memoizedCountryTable =  React.memo(CountryTable) \n\nexport {\n  memoizedCountryTable as CountryTable\n}\n","import React, { PureComponent, useState } from \"react\";\nimport {\n  ResponsiveContainer,\n  AreaChart,\n  BarChart,\n  Cell,\n  ComposedChart,\n  Bar,\n  Line,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from \"recharts\";\nimport dataFormatted from \"../../utils/rechartDataFormatter\";\n// import BarChart from \"./BarChart\";\n\n\n\nfunction ToolTip(say) {\n return ({ active, payload, label }) => {\n    if (active && payload) {\n      const date = new Date(payload[0].payload.fulldate);\n      const month = date.toLocaleString(\"default\", { month: \"short\" });\n      const dayOfMonth = date.toLocaleString(\"default\", { day: \"numeric\" });\n  \n      return (\n        <div className=\"grid_box\" style={{ padding: \"10px\" }}>\n          <h4 style={{ margin: \"0px\" }}>{month + \" \" + dayOfMonth}</h4>\n          <p style={{ margin: \"0px\" }}>\n            {payload[0].payload.value.toLocaleString()} {say ?? ''} \n          </p>\n        </div>\n      );\n    }\n  \n    return null;\n  };\n}\n\n\n\n function HM(props) {\n  const data = {\n    xAxisValue: props.xAxisValue,\n    yAxisValue: props.yAxisValue,\n    data: props.timeline,\n  };\n\n  const formattedData = dataFormatted(data);\n  \n  if (props.simple) {\n    return (\n      <ResponsiveContainer  width=\"100%\" height=\"100%\">\n        <AreaChart data={formattedData}\n         margin={{\n          top: 0, right: 0, left: 0, bottom: 0,\n        }}>\n          \n          \n          <Area\n            strokeWidth={2.5}\n            isAnimationActive={true}\n            animationEasing='linear'\n            animationDuration={400}\n          \n            dataKey=\"value\"\n            stroke=\"#A5CFE3\"\n            fill=\"rgba(166, 206, 227, 0.2)\"\n          />\n        </AreaChart>\n      </ResponsiveContainer>\n    );\n  }\n\n  \n\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <BarChart data={formattedData}>\n        <CartesianGrid vertical={false} stroke=\"#666666\" strokeDasharray=\"7\" />\n        <XAxis dataKey=\"name\" tickLine={false} ticks={['Jan','Feb','Mar', 'Apr','May']} />\n        <YAxis tickLine={false} />\n        <Tooltip\n          cursor={true}\n          content={ToolTip(props.say)}\n          isAnimationActive={false}\n        />\n        {/* <Area type=\"monotone\" dataKey=\"value\" fill=\"#8884d8\" stroke=\"#8884d8\" /> */}\n        \n        <Bar dataKey=\"value\" fill=\"rgba(166, 206, 227, 0.5)\"   isAnimationActive={false} />\n\n        {/* <Line\n         isAnimationActive={false}\n          activeDot={false}\n          dot={false}\n          type=\"monotone\"\n          dataKey=\"value\"\n          stroke=\"#A5CFE3\"\n          strokeWidth={2.5}\n        /> */}\n      </BarChart>\n    </ResponsiveContainer>\n  );\n}\n\n\nconst memoizedHM = React.memo(HM)\nexport {\n  memoizedHM as HM\n}","import { Timeline } from \"../DataInterfaces/allCountriesDataInterface\";\nimport sma from \"../utils/sma\";\nexport default function format({\n  yAxisValue,\n  data,\n}: {\n  yAxisValue: string;\n  data: Timeline[] | undefined | null;\n}) {\n  \n  if (!data) {\n    return null;\n  }\n\n\n\n\n\n  const dataMapped = data?.map((x,i) => {\n    return {\n      name: new Date(x.date).toLocaleString(\"default\", { month: \"short\" }),\n      fulldate: x.date,\n      value: x[yAxisValue],\n      // movingAvg: mavg[i]\n\n    };\n  });\n\n  return dataMapped.reverse();\n}\n","import React from \"react\";\nimport { useQuery } from \"react-query\";\nimport { Country } from \"../../DataInterfaces/allCountriesDataInterface\";\n\nfunction getCountryTimeLine(countryCode: string) {\n   \n  return fetch(`https://corona-api.com/countries/${countryCode}`).then((res) =>\n    res.json()\n  ).then(res => res.data)\n}\n\ninterface CountryTimeLineHOCProps {\n  countryCode: string;\n  children: (data: CountryTimeLineHOCallbackProps) => any;\n}\n\ninterface CountryTimeLineHOCallbackProps {\n    country: Country,\n    error: Error | null,\n    isLoading: boolean\n}\n\nexport function CountryTimeLineHOC({\n  countryCode,\n  children,\n}: CountryTimeLineHOCProps) {\n \n  const { data, error, isLoading } = useQuery(countryCode, getCountryTimeLine, {\n    refetchInterval: 0,\n    refetchOnWindowFocus: false,\n    refetchIntervalInBackground: false,\n  });\n\n\n  const pass: CountryTimeLineHOCallbackProps = {\n        country: data,\n        isLoading,\n        error\n  }\n\n  return <>{children(pass)}</>;\n}\n","import React from \"react\";\nimport Map from \"./Map\";\nimport GridBox from \"./GridBox\";\nimport MyResponsiveLine from \"./LineChart\";\nimport data from \"./tempdata\";\nimport { UseCovidDataReturns } from \"./CovidDataHOC\";\nimport { CountryTable } from \"./CountryTable\";\n// import TwitterEmbed from \"./TwitterEmbed\";\n\nimport { HM } from \"./LineAndBarChart\";\nimport { CountryTimeLineHOC } from \"./CountryTimeLineHOC\";\n\ntype DashboardProps = Pick<UseCovidDataReturns,\"allCountriesData\" | \"isLoading\" | \"countryData\" | \"globalTimeline\">;\n\nexport default function Dashboard(props: DashboardProps) {\n\n\n  return (\n    <div className=\"grid-container\">\n      <GridBox id=\"count_total_cases\" isLoading={props.isLoading}>\n        <div className=\"grid_box_inner_content\">\n          <p>Total Cases</p>\n          <h3>{props.countryData?.cases.toLocaleString()}</h3>\n        </div>\n        <div\n          style={{\n            position: \"absolute\",\n            top: \"0px\",\n            left: \"0px\",\n            bottom: \"0px\",\n            right: \"0px\",\n          }}\n        >\n          {/* <MyResponsiveLine\n            simple={true}\n            timeline={props.countryData?.timeline}\n            xAxisValue=\"date\"\n            yAxisValue=\"confirmed\"\n          /> */}\n        </div>\n      </GridBox>\n\n      <GridBox id=\"count_total_deaths\" isLoading={props.isLoading}>\n        <div className=\"grid_box_inner_content\">\n          <p>Total Deaths</p>\n          <h3>{props.countryData?.deaths.toLocaleString()}</h3>\n        </div>\n      </GridBox>\n\n      <GridBox id=\"count_total_recoveries\" isLoading={props.isLoading}>\n        <div className=\"grid_box_inner_content\">\n          <p>Total Recovered</p>\n          <h3>{props.countryData?.recovered.toLocaleString()}</h3>\n        </div>\n      </GridBox>\n\n      <CountryTimeLineHOC\n        countryCode={props.countryData?.countryInfo.iso2 ?? \"TH\"}\n      >\n        {({ country, error, isLoading }) => {\n          if (error) {\n            return (\n              <div\n                style={{\n                  textAlign: \"center\",\n                  padding: \"10px\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  height: \"100%\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <span>Error</span>\n              </div>\n            );\n          }\n\n          return (\n            <GridBox id=\"cases_today\" isLoading={props.isLoading}>\n              <div className=\"grid_box_inner_content\">\n                <p>Cases Today</p>\n                <h3>\n                  {country?.timeline[0]?.new_confirmed.toLocaleString() ?? \"N/A\"}\n                </h3>\n              </div>\n            </GridBox>\n          );\n        }}\n      </CountryTimeLineHOC>\n\n      <CountryTimeLineHOC\n        countryCode={props.countryData?.countryInfo.iso2 ?? \"TH\"}\n      >\n        {({ country, error, isLoading }) => {\n          if (error) {\n            return (\n              <div\n                style={{\n                  textAlign: \"center\",\n                  padding: \"10px\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  height: \"100%\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <span>Error</span>\n              </div>\n            );\n          }\n\n          return (\n            <GridBox id=\"cases_recovered\" isLoading={props.isLoading}>\n              <div className=\"grid_box_inner_content\">\n                <p>Cases Recovered</p>\n                <h3>\n                  {country?.timeline[0]?.new_recovered.toLocaleString() ??\n                    \"N/A\"}\n                </h3>\n              </div>\n            </GridBox>\n          );\n        }}\n      </CountryTimeLineHOC>\n\n    \n      <CountryTimeLineHOC\n        countryCode={props.countryData?.countryInfo.iso2 ?? \"TH\"}\n      >\n        {({ country, error, isLoading }) => {\n          if (error) {\n            return (\n              <div\n                style={{\n                  textAlign: \"center\",\n                  padding: \"10px\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  height: \"100%\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <span>Error</span>\n              </div>\n            );\n          }\n          \n\n          return (\n            <GridBox id=\"graph_fatality\" isLoading={props.isLoading}>\n        <div className=\"grid_box_inner_content\" style={{ zIndex: 1 }}>\n          <p>Fatality Rate</p>\n          <h3>\n            {(\n              (props.countryData?.deaths ?? 1) /\n              (props.countryData?.cases ?? 1)\n            ).toFixed(3) + \"%\"}\n          </h3>\n        </div>\n        <div\n          style={{\n            position: \"absolute\",\n            top: \"0px\",\n            left: \"0px\",\n            bottom: \"0px\",\n            right: \"0px\",\n          }}\n        >\n\n          <HM\n            simple={true}\n            xAxisValue=\"date\"\n            yAxisValue=\"deaths\"\n            timeline={country?.timeline}\n          />\n        </div>\n      </GridBox>\n          );\n        }}\n      </CountryTimeLineHOC>\n\n\n      <CountryTimeLineHOC\n        countryCode={props.countryData?.countryInfo.iso2 ?? \"TH\"}\n      >\n        {({ country, error, isLoading }) => {\n          if (error) {\n            return (\n              <div\n                style={{\n                  textAlign: \"center\",\n                  padding: \"10px\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  height: \"100%\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <span>Error</span>\n              </div>\n            );\n          }\n\n          return (\n            <GridBox id=\"graph_recovery\" isLoading={props.isLoading}>\n            <div className=\"grid_box_inner_content\" style={{ zIndex: 1 }}>\n              <p>Recovery Rate</p>\n              <h3>\n                {/* @ts-ignore */}\n                {(\n                  (props.countryData?.recovered ?? 1) / (props.countryData?.cases ?? 1)\n                ).toFixed(3) + \"%\"}\n              </h3>\n            </div>\n            <div\n              style={{\n                position: \"absolute\",\n                top: \"0px\",\n                left: \"0px\",\n                bottom: \"0px\",\n                right: \"0px\",\n              }}\n            >\n              {/* <MyResponsiveLine\n                simple={true}\n                timeline={props.countryData?.timeline}\n                xAxisValue=\"date\"\n                yAxisValue=\"recovered\"\n              /> */}\n    \n              <HM\n                simple={true}\n                xAxisValue=\"date\"\n                yAxisValue=\"recovered\"\n                timeline={country?.timeline ?? []}\n              />\n            </div>\n          </GridBox>\n          );\n        }}\n      </CountryTimeLineHOC>\n     \n\n     \n\n      <GridBox id=\"map\" isLoading={props.isLoading}>\n        <div style={{ padding: \"10px\" }}>\n          <Map\n            lat={props.countryData?.countryInfo.lat}\n            lng={props.countryData?.countryInfo.long}\n            allCoutries={props.allCountriesData}\n          />\n        </div>\n      </GridBox>\n\n      {/* <GridBox id=\"twitterfeed\" isLoading={props.isLoading}>\n        <TwitterEmbed />\n      </GridBox> */}\n\n      <GridBox id=\"global_graph_recovery\" isLoading={props.isLoading}>\n        <div className=\"graph_heading\">Global Recoveries Over Time</div>\n\n        <div className=\"graph_container\">\n          <div\n            style={{\n              position: \"absolute\",\n              top: \"12px\",\n              bottom: \"12px\",\n              left: \"12px\",\n              right: \"12px\",\n            }}\n          >\n            {/* <MyResponsiveLine\n            timeline={props.globalTimeline?.data}\n            xAxisValue=\"date\"\n            yAxisValue=\"recovered\"\n            options={graphOptions}\n          /> */}\n\n            <HM\n              say=\"recovered\"\n              xAxisValue=\"date\"\n              yAxisValue=\"recovered\"\n              timeline={props.globalTimeline?.data}\n            />\n          </div>\n        </div>\n      </GridBox>\n\n      <GridBox id=\"global_graph_fatality\" isLoading={props.isLoading}>\n        <div className=\"graph_heading\">Global Fatalities Over Time</div>\n        <div className=\"graph_container\">\n          <div\n            style={{\n              position: \"absolute\",\n              top: \"12px\",\n              bottom: \"12px\",\n              left: \"12px\",\n              right: \"12px\",\n            }}\n          >\n            <HM\n              say=\"dead\"\n              xAxisValue=\"date\"\n              yAxisValue=\"deaths\"\n              timeline={props.globalTimeline?.data}\n            />\n          </div>\n        </div>\n      </GridBox>\n\n      <GridBox id=\"global_graph_cases\" isLoading={props.isLoading}>\n        <div className=\"graph_heading\">Global New Cases Over Time</div>\n        <div className=\"graph_container\">\n          <div\n            style={{\n              position: \"absolute\",\n              top: \"12px\",\n              bottom: \"12px\",\n              left: \"12px\",\n              right: \"12px\",\n            }}\n          >\n            <HM\n              say=\"new cases\"\n              xAxisValue=\"date\"\n              yAxisValue=\"new_confirmed\"\n              timeline={props.globalTimeline?.data}\n            />\n          </div>\n        </div>\n      </GridBox>\n\n      {/*  */}\n\n      <CountryTimeLineHOC\n        countryCode={props.countryData?.countryInfo.iso2 ?? \"TH\"}\n      >\n        {({ country, error, isLoading }) => {\n          if (error) {\n            return (\n              <div\n                style={{\n                  textAlign: \"center\",\n                  padding: \"10px\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  height: \"100%\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <span>Error</span>\n              </div>\n            );\n          }\n\n          return (\n            <GridBox id=\"local_graph_recovery\" isLoading={props.isLoading}>\n            <div className=\"graph_heading\">\n              Recovery Over Time for {props.countryData?.country ?? \"N/A\"}{\" \"}\n            </div>\n    \n            <div className=\"graph_container\">\n              <div\n                style={{\n                  position: \"absolute\",\n                  top: \"12px\",\n                  bottom: \"12px\",\n                  left: \"12px\",\n                  right: \"12px\",\n                }}\n              >\n         \n                <HM\n                xAxisValue=\"date\"\n                yAxisValue=\"recovered\"\n                say=\"recovered\"\n                timeline={country?.timeline ?? []}\n              />\n              </div>\n            </div>\n          </GridBox>\n          );\n        }}\n      </CountryTimeLineHOC>\n      \n      \n\n      <CountryTimeLineHOC\n        countryCode={props.countryData?.countryInfo.iso2 ?? \"TH\"}\n      >\n        {({ country, error, isLoading }) => {\n          if (error) {\n            return (\n              <div\n                style={{\n                  textAlign: \"center\",\n                  padding: \"10px\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  height: \"100%\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <span>Error</span>\n              </div>\n            );\n          }\n\n          return (\n            <GridBox id=\"local_graph_fatality\" isLoading={props.isLoading}>\n        <div className=\"graph_heading\">\n          Fatalities Over Time for {props.countryData?.country ?? \"N/A\"}{\" \"}\n        </div>\n        <div className=\"graph_container\">\n          <div\n            style={{\n              position: \"absolute\",\n              top: \"12px\",\n              bottom: \"12px\",\n              left: \"12px\",\n              right: \"12px\",\n            }}\n          >\n  \n            <HM\n            say=\"dead\"\n            xAxisValue=\"date\"\n            yAxisValue=\"deaths\"\n            timeline={country?.timeline ?? []}\n          />\n          </div>\n        </div>\n      </GridBox>\n          );\n        }}\n      </CountryTimeLineHOC>\n     \n\n      <CountryTimeLineHOC\n        countryCode={props.countryData?.countryInfo.iso2 ?? \"TH\"}\n      >\n        {({ country, error, isLoading }) => {\n          if (error) {\n            return (\n              <div\n                style={{\n                  textAlign: \"center\",\n                  padding: \"10px\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  height: \"100%\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <span>Error</span>\n              </div>\n            );\n          }\n\n          return (\n            <GridBox id=\"local_graph_cases\" isLoading={props.isLoading}>\n            <div className=\"graph_heading\">\n              New Cases Over Time for {props.countryData?.country ?? \"N/A\"}{\" \"}\n            </div>\n            <div className=\"graph_container\">\n              <div\n                style={{\n                  position: \"absolute\",\n                  top: \"12px\",\n                  bottom: \"12px\",\n                  left: \"12px\",\n                  right: \"12px\",\n                }}\n              >\n      \n    \n                <HM\n                  say=\"new cases\"\n                  xAxisValue=\"date\"\n                  yAxisValue=\"new_confirmed\"\n                  timeline={country?.timeline ?? []}\n                />\n              </div>\n            </div>\n          </GridBox>\n          );\n        }}\n      </CountryTimeLineHOC>\n     \n\n      <GridBox id=\"table\" isLoading={props.isLoading}>\n        <div\n          style={{\n            position: \"absolute\",\n            top: \"0px\",\n            bottom: \"0px\",\n            left: \"0px\",\n            right: \"0px\",\n            overflow: \"auto\",\n          }}\n        >\n          <CountryTable data={props.allCountriesData?.data ?? []} />\n        </div>\n      </GridBox>\n    </div>\n  );\n}\n","import React, { ReactNode } from \"react\";\nimport countryCodeToEmoji from \"../../utils/countryCodeToEmoji\";\nimport { AllCountriesDataInterface, Country } from \"../../DataInterfaces/allCountriesDataInterface\";\nimport { UseCovidDataReturns } from \"./CovidDataHOC\";\n\n\n\n\n\n\n// interface ControlFormProps {\n \n//   isLoading: boolean;\n//   changeCountry: any\n//   allCountriesData: AllCountriesDataInterface | null | undefined\n//   countryData: Country | null | undefined\n  \n\n\n// }\n\n// create type from existing type !\ntype ControlFormProps  = Pick<UseCovidDataReturns, 'allCountriesData' | 'changeCountry' | 'isLoading' | 'countryData'> \n\n\n\nfunction ControlForm(props: ControlFormProps) {\n  if (props.isLoading) {\n    return (\n      <div className=\"controls\">\n        <div className=\"controls_detail\">\n          <span>Updated {new Date().toDateString()}</span>\n          <h3>Realtime stats for</h3>          \n        </div>\n\n        \n        <form>\n          <select>\n            <option>Loading ...</option>\n          </select>\n        </form>\n      </div>\n    );\n  }\n\n  \n\n  return (\n    <div className=\"controls\">\n      <div className=\"controls_detail\">\n        <span>Updated {new Date().toDateString()}</span>\n        <h3>Realtime stats for</h3>          \n      </div>       \n      <form>\n        <select name=\"currentCountry\" value={props.countryData?.country} onChange={props.changeCountry}>\n          \n          {props.allCountriesData?.data.map(country => {\n            return (\n              <option key={'' + country.countryInfo.iso2 + country.countryInfo.iso3} value={country.country}>\n                {\" \"}\n                {countryCodeToEmoji(country.countryInfo.iso2)} &nbsp; {country.country}\n              </option>\n            );\n          })}\n        </select>\n      </form>\n\n    </div>\n  );\n}\n\nexport default React.memo(ControlForm);\n","import React, { useState, useEffect } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { delay } from \"../../utils/artificialDelay\";\nimport { captureException } from \"@sentry/browser\";\nimport {\n  AllCountriesDataInterface,\n  Country,\n} from \"../../DataInterfaces/allCountriesDataInterface\";\nimport { NewCountryData } from \"../../DataInterfaces/novelGetAllCountries\";\nimport { GlobalTimelineInterface } from \"../../DataInterfaces/globalTimelineInterface\";\n\ninterface COVIDDataProps {\n  startingCountry: string;\n}\n\ninterface COVIDDataState {\n  allCountriesData: AllCountriesDataInterface | null | undefined;\n  countryData: NewCountryData | null | undefined;\n  globalTimeline: GlobalTimelineInterface | null | undefined;\n}\n\n\nexport interface UseCovidDataReturns  extends COVIDDataState{\n  retry: any\n  changeCountry: (event: React.SyntheticEvent) => void;\n  isLoading: boolean,\n  error: Error | null\n}\n\n// export default class COVIDData extends React.Component<\n//   COVIDDataProps,\n//   COVIDDataState\n// > {\n\n//   private readonly storageKey = 'covid'\n//   state = {\n\n//     globalTimeline: null,\n//     isLoading: true,\n//     error: null,\n//     countryData: null,\n//     allCountriesData: null,\n\n//   }\n\n//   componentDidMount() {\n//     this.setState({\n//       error: null,\n//       isLoading: true,\n//     });\n\n//     if(!window.sessionStorage.hasOwnProperty('covid')) {\n//       Promise.all([\n//         fetch(`https://corona-api.com/countries?include=timeline`).then((res) =>\n//           res.json()\n//         ),\n//         fetch(`https://corona-api.com/timeline`).then((res) => res.json()),\n//       ])\n//         .finally(() => delay(400))\n//         .then((res) => {\n//           const allCountries: AllCountriesDataInterface = res[0]\n\n//           //TODO: Fix countries having no lat or long ?\n\n//           const validCountries = allCountries.data.filter(x => {\n//             return x.countryInfo.lat !== 0 && x.countryInfo.long !== 0\n//            })\n\n//           const countryData = validCountries.find(x => {\n//               return x.country === this.props.startingCountry\n//           })\n\n//           allCountries.data = validCountries\n\n//           this.setState(prev => {\n\n//             const state =  {\n//               allCountriesData: allCountries,\n//               globalTimeline: res[1],\n//               countryData: countryData,\n//               isLoading: false,\n//             }\n\n//             window.sessionStorage.setItem(this.storageKey, JSON.stringify(state))\n\n//             return state\n\n//           });\n\n//         })\n//         .catch((err: Error) => {\n//           console.log(err);\n//           // sends error to sentry\n//           captureException(err);\n//           this.setState({\n//             error: err.message,\n//             isLoading: false\n//           });\n//         });\n//     } else {\n//       this.setState({isLoading: true, error: null})\n//       console.log('isloading called on cache hit')\n\n//       // the synchronous call to parse and getItem blocks the component from rendering\n//       // useEffect may help here since the effects are scheduled after rendering i guess\n//       delay(100).then(() => {\n//         console.log('waiting')\n//          //@ts-ignore\n//         const state: COVIDDataState  =  JSON.parse(window.sessionStorage.getItem(this.storageKey))\n//         this.setState(state)\n//       })\n\n//     }\n\n//   }\n\n//   changeCountry = (event) => {\n//     console.log('changed event')\n//     const { value: currentCountry } = event.target;\n//     // const country = this.state.summary.data.find(x => x.code)\n\n//     this.setState(prev => {\n//       // find country from array\n//       var t0 = performance.now()\n//       const countryData = prev.allCountriesData?.data.find(\n//         x => x.name === currentCountry\n//       );\n\n//       var t1 = performance.now()\n//       // split and set current country\n\n//       console.log(\"Call to doSomething took \" + (t1 - t0) + \" milliseconds.\")\n//       return {\n\n//         countryData: countryData,\n\n//       };\n//     });\n\n//   };\n\n//   retry = () => {\n\n//     this.setState({\n//       error: null,\n//       isLoading: true,\n//     });\n\n//     Promise.all([\n//       fetch(`https://corona-api.com/countries?include=timeline`).then((res) =>\n//         res.json()\n//       ),\n//       fetch(`https://corona-api.com/timeline`).then((res) => res.json()),\n//     ])\n//       .finally(() => delay(800))\n//       .then((res) => {\n\n//         const allCountries: AllCountriesDataInterface = res[0]\n\n//         const validCountries = allCountries.data.filter(x => {\n//           return x.coordinates.latitude !== 0 && x.coordinates.longitude !== 0\n//          })\n\n//         const countryData = validCountries.find(x => {\n//             return x.code === this.props.startingCountry\n//         })\n\n//         allCountries.data = validCountries\n\n//         this.setState({\n\n//           allCountriesData: allCountries ,\n//           globalTimeline: res[1],\n//           countryData: countryData,\n//           isLoading: false,\n//         });\n//       })\n//       .catch((err: Error) => {\n//         console.log(err);\n//         captureException(err);\n//         this.setState({\n//           error: err.message,\n//           isLoading: false\n//         });\n//       });\n//   };\n\n//   render() {\n//     const data: COVIDDataCallback = {\n//       allCountriesData: this.state.allCountriesData,\n//       globalTimeline: this.state.globalTimeline,\n//       isLoading: this.state.isLoading,\n//       changeCountry: this.changeCountry,\n//       countryData: this.state.countryData,\n//       error: this.state.error,\n//       retry: this.retry,\n//     };\n//     return (\n\n//       this.props.children(data)\n//     );\n//   }\n// }\n\nfunction getAllData(query) {\n  \n  return Promise.all([\n    fetch(`https://corona.lmao.ninja/v3/covid-19/countries`).then((res) =>\n      res.json()\n    ),\n    fetch(`https://corona-api.com/timeline`).then((res) => res.json()),\n  ]);\n}\n\nexport default function useCovidData(props: COVIDDataProps): UseCovidDataReturns  {\n  const { refetch, isLoading, error, data } = useQuery(\n    [\n      `https://corona.lmao.ninja/v3/covid-19/countries`,\n      `https://corona-api.com/timeline`,\n    ],\n    getAllData,\n    {refetchInterval: 0, refetchOnWindowFocus: false, refetchIntervalInBackground: false}\n  );\n\n  const [state, setState] = useState<COVIDDataState>({\n    globalTimeline: null,\n    countryData: null,\n    allCountriesData: null,\n  });\n\n  const [startingCountry, setStartingCountry] = useState<string>(\n    props.startingCountry\n  );\n\n  useEffect(() => {\n      if(data && data[0] && data[1]) {\n        const allCountries: AllCountriesDataInterface = { data: data[0]}\n\n                const validCountries = allCountries.data.filter(x => {\n                  return x.countryInfo.lat !== 0 && x.countryInfo.long !== 0\n                 })\n        \n                const countryData = validCountries.find(x => {\n                    return x.country === startingCountry\n                })\n\n                const workaroundData =  {\n                  data: validCountries\n                }\n\n                setState({\n                  ...state,\n                  allCountriesData: workaroundData ,\n                  globalTimeline: data[1],\n                  countryData: countryData,\n                })\n      }\n\n  }, [data]);\n\n  const changeCountry = (event) => {\n    const { value: currentCountry} = event.target\n    let countryData = state.allCountriesData?.data.find(\n      (x) => x.country === currentCountry\n    );\n\n\n\n    if (countryData)\n      setState((prev) => {\n        return {\n          ...prev,\n          countryData: countryData,\n        };\n      });\n\n      setStartingCountry(currentCountry)\n  };\n\n  return {\n    allCountriesData: state.allCountriesData,\n    globalTimeline: state.globalTimeline,\n    isLoading: isLoading,\n    changeCountry,\n    countryData: state.countryData,\n    error: error,\n    retry: refetch,\n  };\n}\n","import React from \"react\";\n\nexport default function About() {\n  return (\n    <div className=\"about\">\n      <h1>About</h1>\n\n      <p>\n        This is a simple project i made to learn React. The source code for this\n        app is available on github. The API for the dashboard is provided by{\" \"}\n        <a href=\"https://about-corona.net/documentation\">\n          https://about-corona.net/documentation\n        </a>\n        .\n        <br /> <br /> The sources for data are available at the api\n        documentation as well.\n      </p>\n\n      <h4 style={{ marginTop: \"10px\", marginBottom: \"10px\" }}>Data Sources</h4>\n\n        <ul style={{ marginTop: \"0px\" }}>\n          <li>World Health Organization Situation Reports</li>\n          <li>Johns Hopkins CSSE</li>\n          <li>US CDC</li>\n          <li>China CDC (CCDC)</li>\n          <li>European Centre for Disease Prevention and Control (ECDC)</li>\n          <li>\n            National Health Commission of the People’s Republic of China (NHC)\n          </li>\n          <li>DXY.cn. Pneumonia. 2020</li>\n        </ul>\n\n      <p>\n        Thanks to{\" \"}\n        <a href=\"https://about-corona.net/\">https://about-corona.net </a>\n        for providing the API.\n      </p>\n\n      <h3 style={{ textAlign: \"center\", marginTop: \"20px\" }}>\n        Stay Safe • Wear Masks • Wash hands • Maintain Social Distance\n      </h3>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function About() {\n  return (\n    <div className=\"manual\">\n      <iframe className=\"iframe\" src=\"https://tunchz.github.io/ISOC/Manual_DRM.pdf\">\n\n      </iframe>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Dashboard from \"./Dashboard Components/Dashboard\";\nimport ControlForm from \"./Dashboard Components/Controls\";\nimport COVIDData, {  } from \"./Dashboard Components/CovidDataHOC\";\nimport {Switch, Route} from 'react-router-dom'\nimport About from \"./About\";\nimport Manual from \"./Manual\";\nimport useCovidData from \"./Dashboard Components/CovidDataHOC\";\n\nfunction RenderMain() {\n  const {\n      allCountriesData,\n      error,\n      changeCountry,\n      countryData,\n      isLoading,\n      globalTimeline,\n      retry,\n\n  } = useCovidData({\n    startingCountry: 'Thailand'\n  })\n  if (!error) {\n    return (\n      <>\n        <ControlForm\n          isLoading={isLoading}\n          allCountriesData={allCountriesData}\n          changeCountry={changeCountry}\n          countryData={countryData}\n        />\n        <Dashboard\n          allCountriesData={allCountriesData}\n          isLoading={isLoading}\n          globalTimeline={globalTimeline}\n          countryData={countryData}\n        />\n      </>\n    );\n  } else {\n    return (\n      <>\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            textAlign: \"center\",\n          }}\n        >\n          <h4>An Error Occurred</h4>\n          <p>Please Try Again Later</p>\n          <p style={{ width: \"240px\" }}>\n            But don't worry it has been automatically reported\n          </p>\n          <br></br>\n          <button\n            onClick={retry}\n            style={{\n              borderRadius: \"2px\",\n              color: \"white\",\n              background: \"#1f78b4\",\n              outline: \"none\",\n              border: \"0px\",\n              fontSize: \"15px\",\n              height: \"40px\",\n              display: \"block\",\n              width: \"200px\",\n            }}\n          >\n            Retry\n          </button>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default function Main(props) {\n  return (\n    <main>\n      <div className=\"main_content\">\n\n        \n        <Switch>\n          <Route exact path='/'>\n            <RenderMain/>\n          </Route>\n\n          <Route  path='/about'>\n             <About/>\n          </Route>\n\n          <Route  path='/manual'>\n             <Manual/>\n          </Route>\n\n        </Switch>\n       \n      </div>\n    </main>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport NavBar from './Components/Nav'\nimport Footer from './Components/Footer';\nimport Main from './Components/Main';\n\n\n\nfunction App() {\n  return (\n    <>\n    <NavBar/>\n      <Main/>\n    <Footer/>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport mapboxgl from 'mapbox-gl';\nimport {init} from '@sentry/browser';\nimport {BrowserRouter as Router} from 'react-router-dom'\n\n//  only run sentry in production not during development\nif(process.env.NODE_ENV === 'production') {\n  init({dsn: process.env.REACT_APP_SENTRYDSN});\n}\n\n\n\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN ?? ''\n\n\nReactDOM.render(\n  // <React.StrictMode>\n  <Router>\n     <App />\n  </Router>\n   \n  // </React.StrictMode>,\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}