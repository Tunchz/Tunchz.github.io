{"version":3,"sources":["components/Timeline.js"],"names":["React","memo","setIsTimelineMode","setDate","dates","useMeasure","timelineElement","width","useState","index","setIndex","t","useTranslation","useSprings","length","i","x","color","opacity","config","stiff","springs","set","bind","useDrag","down","xDelta","delta","xDir","direction","distance","cancel","clampedIndex","getClampedIndex","setClampedDate","hideTimeline","setSprings","clamp","display","handleKeyPress","useKeyPressEvent","setTimeout","getDate","getIndiaDateISO","formatDate","timeline","transition","useTransition","hasOwnProperty","from","transform","enter","leave","handleClick","Fragment","map","item","key","props","h5","className","style","ref","filter","div","interpolate","onClick"],"mappings":"8NA2MeA,cAAMC,MAlMJ,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,kBAAmBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,MAAW,EACrBC,cADqB,mBACjDC,EADiD,KAC/BC,EAD+B,KAC/BA,MAD+B,EAE9BC,mBAAS,GAFqB,mBAEjDC,EAFiD,KAE1CC,EAF0C,KAGjDC,EAAKC,cAALD,EAHiD,EAKjCE,YACrBT,EAAMU,QACN,SAACC,GAAD,MAAQ,CACNC,EAAG,KAACP,EAAQM,GAAiB,IAAU,GACvCE,MAAa,IAANF,EAAU,UAAY,YAC7BG,QAASH,EAAI,EAAI,EAAI,KAEvBI,IAAOC,OAZ+C,mBAKjDC,EALiD,KAKxCC,EALwC,KAelDC,EAAOC,aACX,YAAmE,IAAjEC,EAAgE,EAAhEA,KAAcC,EAAkD,cAA1DC,MAA0D,MAA7BC,EAA6B,cAAzCC,UAAyC,MAAtBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,OAC9CC,EAAeC,EAAgBL,GACjCH,GAAQK,EAAW,KACrBC,EAAOrB,EAASsB,IAChBE,EAAeF,IAGH,IAAVvB,GAAemB,EAAO,GACxBO,IAGFC,EAAW,CAACJ,aAAcvB,EAAOmB,OAAMH,OAAMC,cAI3CO,EAAkB,SAACJ,GACvB,OAAOQ,IAAM5B,GAASoB,EAAY,EAAI,GAAK,GAAI,EAAGzB,EAAMU,OAAS,IAG7DsB,EAAa,SAAC,GAA4C,EAA3CP,UAA4C,IAAjCG,EAAgC,EAAhCA,aAAcP,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,OAClDJ,GAAI,SAACP,GACH,GAAIA,EAAIiB,EAAe,EACrB,MAAO,CAAChB,EAAGT,EAAOU,MAAO,YAAaC,QAAS,EAAGoB,QAAS,QACtD,GAAIvB,EAAIiB,EAAe,EAC5B,MAAO,CAAChB,GAAI,GAAIC,MAAO,YAAaC,QAAS,EAAGoB,QAAS,QAG3D,IAAItB,EAAI,EAWR,OATEA,EADEU,EAEsBnB,EAAQ,GAA7ByB,EAAejB,GAChBR,EAAQ,EACR,IACCkB,EAAOC,EAAS,GAEOnB,EAAQ,GAA7ByB,EAAejB,GAAmBR,EAAQ,EAAI,GAGjDQ,IAAMiB,EACD,CAAChB,IAAGC,MAAO,UAAWqB,QAAS,SAEjC,CAACtB,IAAGC,MAAO,YAAaC,QAAS,EAAGoB,QAAS,aAIlDC,EAAiB,SAACV,GACtB,GAAIpB,EAAQL,EAAMU,OAAQ,CACxB,IAAMkB,EAAeC,EAAgBJ,GACrCO,EAAW,CAACP,YAAWG,iBACvBtB,EAASsB,GACTE,EAAeF,GAEH,IAAVvB,IAA8B,IAAfoB,GACjBM,KAIJK,YAAiB,aAAa,WAC5BD,EAAe,MAGjBC,YAAiB,cAAc,WAC7BD,GAAgB,MAGlBC,YAAiB,UAAU,WACzBtC,GAAkB,GAClBC,EAAQ,OAGV,IAAMgC,EAAe,WACnBM,YAAW,WACTvC,GAAkB,KACjB,MAGCwC,EAAU,SAACjC,GACf,OAAIL,EAAMK,KAAWkC,cAA0BhC,EAAE,SAC1CiC,YAAWxC,EAAMK,GAAQ,WAG5ByB,EAAiB,SAACF,GAEpB7B,EADmB,IAAjB6B,EACM,GAEA5B,EAAM4B,KAIZa,EAAW,CACf,aAAc,gCACd,aAAc,0BACd,aAAc,gCACd,aAAc,0BACd,aAAc,gCACd,aAAc,0BACd,aAAc,gCACd,aAAc,0BACd,aAAc,iCAGVC,EAAaC,YACjBF,EAASG,eAAe5C,EAAMK,IAC9B,KACA,CACEwC,KAAM,CAACC,UAAW,0BAA2BhC,QAAS,GACtDiC,MAAO,CAACD,UAAW,yBAA0BhC,QAAS,GACtDkC,MAAO,CAACF,UAAW,0BAA2BhC,QAAS,KAIrDmC,EAAc,SAACrB,GAEjBO,EADEP,EAAevB,EACF,GAEC,IAIpB,OACE,kBAAC,IAAM6C,SAAP,KACGR,EAAWS,KACV,gBAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,IAAKC,EAAb,EAAaA,MAAb,OACEF,GACE,kBAAC,IAASG,GAAV,CAAaC,UAAU,YAAYH,IAAKA,EAAKI,MAAOH,GACjDb,EAASzC,EAAMK,QAKxB,uCAAKmD,UAAU,WAAWE,IAAKxD,GAAqBiB,KACjDF,EACE0C,QACC,WAAYhD,GAAZ,EAAEG,QAAF,OACEH,EAAIX,EAAMU,SACTC,IAAMN,EAAQ,GACbM,IAAMN,EAAQ,GACdM,IAAMN,EAAQ,GACdM,IAAMN,EAAQ,GACdM,IAAMN,MAEX8C,KAAI,WAA+BxC,GAA/B,IAAEC,EAAF,EAAEA,EAAGC,EAAL,EAAKA,MAAOC,EAAZ,EAAYA,QAASoB,EAArB,EAAqBA,QAArB,OACH,kBAAC,IAAS0B,IAAV,CACEJ,UAAU,MACVH,IAAK1C,EACL8C,MAAO,CACLX,UAAWlC,EAAEiD,aAAY,SAACjD,GAAD,4BAAsBA,EAAtB,cACzBE,UACAoB,YAGD7B,EAAQ,GACP,kBAAC,IAASkD,GAAV,CACEE,MAAO,CAAC5C,SACRiD,QAAS,WACPb,EAAYtC,KAGb2B,EAAQ3B,IAGZN,EAAQ,GAAKA,EAAQL,EAAMU,QAC1B,kBAAC,IAAS6C,GAAV,CACEE,MAAO,CAAC5C,SACRiD,QAAS,WACPb,EAAY5C,EAAQM,EAAI,KAGzB2B,EAAQjC,EAAQM,EAAI","file":"static/js/35.3ccea211.chunk.js","sourcesContent":["import {formatDate, getIndiaDateISO} from '../utils/commonFunctions';\n\nimport clamp from 'lodash/clamp';\nimport React, {useState} from 'react';\nimport {useSprings, useTransition, animated, config} from 'react-spring';\nimport {useMeasure, useKeyPressEvent} from 'react-use';\nimport {useDrag} from 'react-use-gesture';\nimport {useTranslation} from 'react-i18next';\n\nconst Timeline = ({setIsTimelineMode, setDate, dates}) => {\n  const [timelineElement, {width}] = useMeasure();\n  const [index, setIndex] = useState(0);\n  const {t} = useTranslation();\n\n  const [springs, set] = useSprings(\n    dates.length,\n    (i) => ({\n      x: (index - i) * (480 / 3) + 480 / 2 - 35,\n      color: i === 0 ? '#6c757d' : '#6c757d99',\n      opacity: i < 2 ? 1 : 0,\n    }),\n    config.stiff\n  );\n\n  const bind = useDrag(\n    ({down, delta: [xDelta], direction: [xDir], distance, cancel}) => {\n      const clampedIndex = getClampedIndex(xDir);\n      if (down && distance > 25) {\n        cancel(setIndex(clampedIndex));\n        setClampedDate(clampedIndex);\n      }\n\n      if (index === 0 && xDir < 0) {\n        hideTimeline();\n      }\n\n      setSprings({clampedIndex: index, xDir, down, xDelta});\n    }\n  );\n\n  const getClampedIndex = (direction) => {\n    return clamp(index + (direction > 0 ? 1 : -1), 0, dates.length - 1);\n  };\n\n  const setSprings = ({direction, clampedIndex, down, xDelta}) => {\n    set((i) => {\n      if (i < clampedIndex - 1) {\n        return {x: width, color: '#6c757d99', opacity: 0, display: 'none'};\n      } else if (i > clampedIndex + 1) {\n        return {x: -40, color: '#6c757d99', opacity: 0, display: 'none'};\n      }\n\n      let x = 0;\n      if (xDelta) {\n        x =\n          (clampedIndex - i) * (width / 3) +\n          width / 2 -\n          35 +\n          (down ? xDelta : 0);\n      } else {\n        x = (clampedIndex - i) * (width / 3) + width / 3 + 45;\n      }\n\n      if (i === clampedIndex) {\n        return {x, color: '#6c757d', display: 'block'};\n      }\n      return {x, color: '#6c757d99', opacity: 1, display: 'block'};\n    });\n  };\n\n  const handleKeyPress = (direction) => {\n    if (index < dates.length) {\n      const clampedIndex = getClampedIndex(direction);\n      setSprings({direction, clampedIndex});\n      setIndex(clampedIndex);\n      setClampedDate(clampedIndex);\n    }\n    if (index === 1 && direction === -1) {\n      hideTimeline();\n    }\n  };\n\n  useKeyPressEvent('ArrowLeft', () => {\n    handleKeyPress(1);\n  });\n\n  useKeyPressEvent('ArrowRight', () => {\n    handleKeyPress(-1);\n  });\n\n  useKeyPressEvent('Escape', () => {\n    setIsTimelineMode(false);\n    setDate('');\n  });\n\n  const hideTimeline = () => {\n    setTimeout(() => {\n      setIsTimelineMode(false);\n    }, 1000);\n  };\n\n  const getDate = (index) => {\n    if (dates[index] === getIndiaDateISO()) return t('Today');\n    return formatDate(dates[index], 'dd MMM');\n  };\n\n  const setClampedDate = (clampedIndex) => {\n    if (clampedIndex === 0) {\n      setDate('');\n    } else {\n      setDate(dates[clampedIndex]);\n    }\n  };\n\n  const timeline = {\n    '2020-03-25': 'Beginning of Lockdown Phase 1',\n    '2020-04-14': 'End of Lockdown Phase 1',\n    '2020-04-15': 'Beginning of Lockdown Phase 2',\n    '2020-05-03': 'End of Lockdown Phase 2',\n    '2020-05-04': 'Beginning of Lockdown Phase 3',\n    '2020-05-17': 'End of Lockdown Phase 3',\n    '2020-05-18': 'Beginning of Lockdown Phase 4',\n    '2020-05-31': 'End of Lockdown Phase 4',\n    '2020-06-01': 'Beginning of Lockdown Phase 5',\n  };\n\n  const transition = useTransition(\n    timeline.hasOwnProperty(dates[index]),\n    null,\n    {\n      from: {transform: 'translate3d(0, 20px, 0)', opacity: 0},\n      enter: {transform: 'translate3d(0, 0px, 0)', opacity: 1},\n      leave: {transform: 'translate3d(0, 20px, 0)', opacity: 0},\n    }\n  );\n\n  const handleClick = (clampedIndex) => {\n    if (clampedIndex > index) {\n      handleKeyPress(+1);\n    } else {\n      handleKeyPress(-1);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {transition.map(\n        ({item, key, props}) =>\n          item && (\n            <animated.h5 className=\"highlight\" key={key} style={props}>\n              {timeline[dates[index]]}\n            </animated.h5>\n          )\n      )}\n\n      <div className=\"Timeline\" ref={timelineElement} {...bind()}>\n        {springs\n          .filter(\n            ({opacity}, i) =>\n              i < dates.length &&\n              (i === index + 1 ||\n                i === index - 1 ||\n                i === index + 2 ||\n                i === index - 2 ||\n                i === index)\n          )\n          .map(({x, color, opacity, display}, i) => (\n            <animated.div\n              className=\"day\"\n              key={i}\n              style={{\n                transform: x.interpolate((x) => `translate3d(${x}px,0,0)`),\n                opacity,\n                display,\n              }}\n            >\n              {index < 2 && (\n                <animated.h5\n                  style={{color}}\n                  onClick={() => {\n                    handleClick(i);\n                  }}\n                >\n                  {getDate(i)}\n                </animated.h5>\n              )}\n              {index > 1 && index < dates.length && (\n                <animated.h5\n                  style={{color}}\n                  onClick={() => {\n                    handleClick(index + i - 2);\n                  }}\n                >\n                  {getDate(index + i - 2)}\n                </animated.h5>\n              )}\n            </animated.div>\n          ))}\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default React.memo(Timeline);\n"],"sourceRoot":""}